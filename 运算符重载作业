A:MyString
总时间限制: 1000ms 内存限制: 65536kB
描述
补足MyString类，使程序输出指定结果
#include <iostream>
#include <string>
#include <cstring>
using namespace std;
class MyString {
	char * p;
public:
	MyString(const char * s) {
		if( s) {
			p = new char[strlen(s) + 1];
			strcpy(p,s);
		}
		else
			p = NULL;

	}
	~MyString() { if(p) delete [] p; }
// 在此处补充你的代码
};
int main()
{
	char w1[200],w2[100];
	while( cin >> w1 >> w2) {
		MyString s1(w1),s2 = s1;
		MyString s3(NULL);
		s3.Copy(w1);
		cout << s1 << "," << s2 << "," << s3 << endl;

		s2 = w2;
		s3 = s2;
		s1 = s3;
		cout << s1 << "," << s2 << "," << s3 << endl;
		
	}
}
输入
多组数据，每组一行，是两个不带空格的字符串
输出
对每组数据，先输出一行，打印输入中的第一个字符串三次
然后再输出一行，打印输入中的第二个字符串三次
样例输入
abc def
123 456
样例输出
abc,abc,abc
def,def,def
123,123,123
456,456,456
来源
Guo Wei

#include <iostream>
#include <string>
#include <cstring>
using namespace std;
class MyString {
	char * p;
public:
	MyString(const char * s) {
		if( s) {
			p = new char[strlen(s) + 1];
			strcpy(p,s);
		}
		else
			p = NULL;

	}
	~MyString() { if(p) delete [] p; }
// 在此处补充你的代码
	//复制构造函数
	MyString(const MyString& s)
	{
		p = new char[strlen(s.p) + 1];
		strcpy(p, s.p);
	}
	//=:char*_to_MyString
	MyString& operator=(char* w)
	{
		if (w)
		{
			delete[]p;
			p = new char[strlen(w) + 1];
			strcpy(p, w);
			return *this;
		}
		else
		{
			p = NULL;
			return *this;
		}
	}
	//=: MyString_to_MyString
	MyString& operator=(MyString& m)
	{
		if (p == m.p)
			return *this;
		else
		{
			if (m.p)
			{
				delete[]p;
				p = new char[strlen(m.p) + 1];
				strcpy(p, m.p);
				return *this;
			}
			else
			{
				p = NULL;
				return *this;
			}
		}
	}
	//Copy
	void Copy(char *s)
	{
		if (s)
		{
			delete[]p;
			p = new char[strlen(s) + 1];
			strcpy(p, s);
		}
		else
			p=NULL;
	}
	//cout<<
	friend ostream& operator<<(ostream& o, const MyString& s)
	{
		o << s.p;
		return o;
	}
};
int main()
{
	char w1[200],w2[100];
	while( cin >> w1 >> w2) {
		MyString s1(w1),s2 = s1;
		MyString s3(NULL);
		s3.Copy(w1);
		cout << s1 << "," << s2 << "," << s3 << endl;

		s2 = w2;
		s3 = s2;
		s1 = s3;
		cout << s1 << "," << s2 << "," << s3 << endl;
		
	}
}

B:看上去好坑的运算符重载
总时间限制: 1000ms 内存限制: 65536kB
描述
程序填空
#include <iostream> 
using namespace std;
class MyInt 
{ 
	int nVal; 
	public: 
	MyInt( int n) { nVal = n ;}
// 在此处补充你的代码
}; 
int Inc(int n) {
	return n + 1;
}
int main () { 
	int n;
	while(cin >>n) {
		MyInt objInt(n); 
		objInt-2-1-3; 
		cout << Inc(objInt);
		cout <<","; 
		objInt-2-1; 
		cout << Inc(objInt) << endl;
	}
	return 0;
}
输入
多组数据，每组一行，整数n
输出
对每组数据，输出一行，包括两个整数， n-5和n - 8
样例输入
20
30
样例输出
15,12
25,22
来源
Guo Wei

#include <iostream> 
using namespace std;
class MyInt 
{ 
	int nVal; 
	public: 
	MyInt( int n) { nVal = n ;}
// 在此处补充你的代码
	//重载-
	MyInt& operator-(int n)
	{
		nVal -= n;
		return *this;
	}
	//重载int
	operator int()
	{
		return nVal;
	}
}; 
int Inc(int n) {
	return n + 1;
}
int main () { 
	int n;
	while(cin >>n) {
		MyInt objInt(n); 
		objInt-2-1-3; 
		cout << Inc(objInt);
		cout <<","; 
		objInt-2-1; 
		cout << Inc(objInt) << endl;
	}
	return 0;
}

C:惊呆！Point竟然能这样输入输出
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
程序填空
#include <iostream> 
using namespace std;
class Point { 
	private: 
		int x; 
		int y; 
	public: 
		Point() { };
// 在此处补充你的代码
}; 
int main() 
{ 
 	Point p;
 	while(cin >> p) {
 		cout << p << endl;
	 }
	return 0;
}
输入
多组数据，每组两个整数
输出
对每组数据，输出一行，就是输入的两个整数
样例输入
2 3
4 5
样例输出
2,3
4,5
来源
Guo Wei

#include <iostream> 
using namespace std;
class Point { 
	private: 
		int x; 
		int y; 
	public: 
		Point() { };
// 在此处补充你的代码
	//重载<<
	friend ostream& operator<<(ostream& o, Point& p)
	{
		o << p.x << "," << p.y ;
		return o;
	}
	//重载>>
	friend istream& operator >> (istream& i, Point &p)
	{
		i >> p.x >> p.y;
		return i;
	}
}; 
int main() 
{ 
 	Point p;
 	while(cin >> p) {
 		cout << p << endl;
	 }
	return 0;
}

D:第四周程序填空题3
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
写一个二维数组类 Array2,使得下面程序的输出结果是：

0,1,2,3,

4,5,6,7,

8,9,10,11,

next

0,1,2,3,

4,5,6,7,

8,9,10,11,

程序：

#include <iostream>
#include <cstring>
using namespace std;

class Array2 {
// 在此处补充你的代码
};

int main() {
    Array2 a(3,4);
    int i,j;
    for(  i = 0;i < 3; ++i )
        for(  j = 0; j < 4; j ++ )
            a[i][j] = i * 4 + j;
    for(  i = 0;i < 3; ++i ) {
        for(  j = 0; j < 4; j ++ ) {
            cout << a(i,j) << ",";
        }
        cout << endl;
    }
    cout << "next" << endl;
    Array2 b;     b = a;
    for(  i = 0;i < 3; ++i ) {
        for(  j = 0; j < 4; j ++ ) {
            cout << b[i][j] << ",";
        }
        cout << endl;
    }
    return 0;
}
输入
无
输出
0,1,2,3,
4,5,6,7,
8,9,10,11,
next
0,1,2,3,
4,5,6,7,
8,9,10,11,
样例输入
None
样例输出
0,1,2,3,
4,5,6,7,
8,9,10,11,
next
0,1,2,3,
4,5,6,7,
8,9,10,11,

#include <iostream>
#include <cstring>
using namespace std;

class Array2 {
 // 在此处补充你的代码
private:
    int** p;
    int n, m;
public:
    Array2(int a = 0, int b = 0)
    {
        n = a; m = b;
        p = new int* [a];
        for (int i = 0; i < a; i++)
        {
            p[i] = new int[b];
            memset(p[i], 0, sizeof(int) * b);
        }
    }
    ~Array2()
    {
        for (int i = 0; i < n; i++)
            delete[]p[i];
        delete[]p;
    }
    Array2& operator=(const Array2& a)
    {
        if (&a == this)
            return *this;
        if (p != NULL)
        {
            for (int i = 0; i < n; i++)
                delete[]p[i];
            delete[]p;
        }
        n = a.n; m = a.m;
        p = new int* [a.n];
        for (int i = 0; i < n; i++)
        {
            p[i] = new int[m];
            memcpy(p[i], a.p[i], m * sizeof(int));
        }
        return *this;
    }
    int operator()(int a, int b) 
    {
        return p[a][b];
    }
    int* operator[](int x)
    {
        return p[x];
    }
};

int main() {
    Array2 a(3,4);
    int i,j;
    for(  i = 0;i < 3; ++i )
        for(  j = 0; j < 4; j ++ )
            a[i][j] = i * 4 + j;
    for(  i = 0;i < 3; ++i ) {
        for(  j = 0; j < 4; j ++ ) {
            cout << a(i,j) << ",";
        }
        cout << endl;
    }
    cout << "next" << endl;
    Array2 b;     b = a;
    for(  i = 0;i < 3; ++i ) {
        for(  j = 0; j < 4; j ++ ) {
            cout << b[i][j] << ",";
        }
        cout << endl;
    }
    return 0;
}

E:别叫，这个大整数已经很简化了!
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
程序填空，输出指定结果

#include <iostream> 
#include <cstring> 
#include <cstdlib> 
#include <cstdio> 
using namespace std;
const int MAX = 110; 
class CHugeInt {
// 在此处补充你的代码
};
int  main() 
{ 
	char s[210];
	int n;

	while (cin >> s >> n) {
		CHugeInt a(s);
		CHugeInt b(n);

		cout << a + b << endl;
		cout << n + a << endl;
		cout << a + n << endl;
		b += n;
		cout  << ++ b << endl;
		cout << b++ << endl;
		cout << b << endl;
	}
	return 0;
}
输入
多组数据，每组数据是两个非负整数s和 n。s最多可能200位， n用int能表示
输出
对每组数据，输出6行，内容分别是：
样例输入
99999999999999999999999999888888888888888812345678901234567789 12
6 6
样例输出
99999999999999999999999999888888888888888812345678901234567801
99999999999999999999999999888888888888888812345678901234567801
99999999999999999999999999888888888888888812345678901234567801
25
25
26
12
12
12
13
13
14
来源
Guo Wei

#include <iostream> 
#include <cstring> 
#include <cstdlib> 
#include <cstdio> 
using namespace std;
const int MAX = 110; 
class CHugeInt {
	// 在此处补充你的代码
private:
	char s[210];
	int len;
public:
	CHugeInt(const char* a)
	{
		memset(s, 0, sizeof(s));
		len = strlen(a);
		for (int i = len - 1; i>=0; --i)
			s[i] = a[len - i - 1] - '0';
	}
	//b(n)
	CHugeInt(int n)
	{
		memset(s, 0, sizeof(s));
		len = 0;
		while (n)
		{
			s[len++] = n % 10;
			n /= 10;
		}
	}
	//重载<<
	friend ostream& operator<<(ostream& o, const CHugeInt& a)
	{
		for (int i = a.len - 1; i >= 0; i--)
			putchar(a.s[i] + '0');
		return o;
	}
	//a+b
	CHugeInt operator+(const CHugeInt& b)
	{
		CHugeInt tp(0);
		tp.len = max(len, b.len);
		for (int i = 0; i < tp.len; i++)
		{
			tp.s[i] += s[i] + b.s[i];
			if (tp.s[i] > 9)
			{
				tp.s[i] -= 10;
				tp.s[i + 1]++;
			}
		}
			if (tp.s[tp.len])
				tp.len++;
			return tp;
	}
	//a+n
	
	//n+a
	friend CHugeInt operator+(const int& n, const CHugeInt& a)
	{
		CHugeInt tp(0), b(n);
		tp.len = max(b.len, a.len);
		for (int i = 0; i < tp.len; i++)
		{
			tp.s[i] += b.s[i] + a.s[i];
			if (tp.s[i] > 9)
			{
				tp.s[i] -= 10;
				tp.s[i + 1]++;
			}
		}
		if (tp.s[tp.len])
			tp.len++;
		return tp;
	}

	//b+=n
	CHugeInt& operator+=(const int& n)
	{
		CHugeInt b(n);
		len = max(len, b.len);
		for (int i = 0; i < len; i++)
		{
			s[i] += b.s[i];
			if (s[i] > 9)
			{
				s[i] -= 10;
				s[i + 1]++;
			}
		}
		if (s[len])
			len++;
		return *this;
	}
	//++b
	CHugeInt& operator ++() 
	{
		int i = 0; ++s[0];
		while (s[i] > 9) s[i] -= 10, ++s[++i];
		len = max(len, i + 1);
		return *this;
	}
	//b++
	CHugeInt operator ++(int) 
	{
		CHugeInt tp(*this);
		int i = 0; ++s[0];
		while (s[i] > 9) s[i] -= 10, ++s[++i];
		len = max(len, i + 1);
		return tp;
	}
};
int  main() 
{ 
	char s[210];
	int n;

	while (cin >> s >> n) {
		CHugeInt a(s);
		CHugeInt b(n);

		cout << a + b << endl;
		cout << n + a << endl;
		cout << a + n << endl;
		b += n;
		cout  << ++ b << endl;
		cout << b++ << endl;
		cout << b << endl;
	}
	return 0;
}
