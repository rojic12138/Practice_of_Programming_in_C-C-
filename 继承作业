A:全面的MyString
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
程序填空，输出指定结果

#include <cstdlib>
#include <iostream>
using namespace std;
int strlen(const char * s) 
{	int i = 0;
	for(; s[i]; ++i);
	return i;
}
void strcpy(char * d,const char * s)
{
	int i = 0;
	for( i = 0; s[i]; ++i)
		d[i] = s[i];
	d[i] = 0;
		
}
int strcmp(const char * s1,const char * s2)
{
	for(int i = 0; s1[i] && s2[i] ; ++i) {
		if( s1[i] < s2[i] )
			return -1;
		else if( s1[i] > s2[i])
			return 1;
	}
	return 0;
}
void strcat(char * d,const char * s)
{
	int len = strlen(d);
	strcpy(d+len,s);
}
class MyString
{
// 在此处补充你的代码
};


int CompareString( const void * e1, const void * e2)
{
	MyString * s1 = (MyString * ) e1;
	MyString * s2 = (MyString * ) e2;
	if( * s1 < *s2 )
	return -1;
	else if( *s1 == *s2)
	return 0;
	else if( *s1 > *s2 )
	return 1;
}
int main()
{
	MyString s1("abcd-"),s2,s3("efgh-"),s4(s1);
	MyString SArray[4] = {"big","me","about","take"};
	cout << "1. " << s1 << s2 << s3<< s4<< endl;
	s4 = s3;
	s3 = s1 + s3;
	cout << "2. " << s1 << endl;
	cout << "3. " << s2 << endl;
	cout << "4. " << s3 << endl;
	cout << "5. " << s4 << endl;
	cout << "6. " << s1[2] << endl;
	s2 = s1;
	s1 = "ijkl-";
	s1[2] = 'A' ;
	cout << "7. " << s2 << endl;
	cout << "8. " << s1 << endl;
	s1 += "mnop";
	cout << "9. " << s1 << endl;
	s4 = "qrst-" + s2;
	cout << "10. " << s4 << endl;
	s1 = s2 + s4 + " uvw " + "xyz";
	cout << "11. " << s1 << endl;
	qsort(SArray,4,sizeof(MyString),CompareString);
	for( int i = 0;i < 4;i ++ )
	cout << SArray[i] << endl;
	//s1的从下标0开始长度为4的子串
	cout << s1(0,4) << endl;
	//s1的从下标5开始长度为10的子串
	cout << s1(5,10) << endl;
	return 0;
}
输入
无
输出
1. abcd-efgh-abcd-
2. abcd-
3.
4. abcd-efgh-
5. efgh-
6. c
7. abcd-
8. ijAl-
9. ijAl-mnop
10. qrst-abcd-
11. abcd-qrst-abcd- uvw xyz
about
big
me
take
abcd
qrst-abcd-
样例输入
无
样例输出
1. abcd-efgh-abcd-
2. abcd-
3. 
4. abcd-efgh-
5. efgh-
6. c
7. abcd-
8. ijAl-
9. ijAl-mnop
10. qrst-abcd-
11. abcd-qrst-abcd- uvw xyz
about
big
me
take
abcd
qrst-abcd-
来源
Guo Wei

#include <cstdlib>
#include <iostream>
using namespace std;
int strlen(const char * s) 
{	int i = 0;
	for(; s[i]; ++i);
	return i;
}
void strcpy(char * d,const char * s)
{
	int i = 0;
	for( i = 0; s[i]; ++i)
		d[i] = s[i];
	d[i] = 0;
		
}
int strcmp(const char * s1,const char * s2)
{
	for(int i = 0; s1[i] && s2[i] ; ++i) {
		if( s1[i] < s2[i] )
			return -1;
		else if( s1[i] > s2[i])
			return 1;
	}
	return 0;
}
void strcat(char * d,const char * s)
{
	int len = strlen(d);
	strcpy(d+len,s);
}
class MyString
{
// 在此处补充你的代码
private:
	char* s;
public:
	~MyString()
	{
		if (s != NULL)
			delete[]s;
	}
	//s1("abcd-")
	MyString(const char* c)
	{
		s = new char[strlen(c) + 1];
		strcpy(s, c);
	}
	//s2
	MyString()
	{
		s = new char[1];
		s[0] = '\0';
	}
	//s4(s1)
	MyString(const MyString& s1)
	{
		s = new char[strlen(s1.s) + 1];
		strcpy(s, s1.s);
	}
	//cout<<s1
	friend ostream& operator<<(ostream& o, const MyString& ms)
	{
		o << ms.s;
		return o;
	}
	//s3 = s1 + s3
	MyString operator+(const MyString &s1)
	{
		char* tp = new char[strlen(s)+ strlen(s1.s) + 1];
		strcpy(tp, s);
		strcat(tp, s1.s);
		return MyString(tp);
	}
	//s1 = s2 + s4 + " uvw " + "xyz";
	MyString operator +(const char* c) 
	{
		char* tmp = new char[strlen(s) + strlen(c) + 1];
		strcpy(tmp, s);
		strcat(tmp, c);
		return MyString(tmp);
	}
	//s1[2] 	// s1[2] = 'A' 加引用
	char& operator[](int n)
	{
		return s[n];
	}
	//s1 = "ijkl-"
	MyString& operator =(char* c)
	{
		if (s)
			delete[]s;
		s = new char[strlen(c) + 1];
		strcpy(s, c);
		return *this;
	}

	//s1 += "mnop"
	MyString& operator+=(const char* c)
	{
		char* tmp = new char[strlen(s) + strlen(c) + 1];
		strcpy(tmp, s);
		strcat(tmp, c);
		if (s != NULL) delete[]s;
		s = tmp;
		return *this;
	}
	//s2=s1
	MyString& operator =(const MyString& s1) 
	{
		if (s != NULL) delete[]s;
		s = new char[strlen(s1.s) + 1];
		strcpy(s, s1.s);
		return *this;
	}
	//s4 = "qrst-" + s2
	friend MyString operator+(const char* c, const MyString &s1)
	{
		return MyString(c) + s1;
	}
	//s1(0, 4)
	char* operator()(int a, int len)
	{
		char* tmp = new char[len + 1];
		for (int i = 0; i < len; i++)
			tmp[i] = s[a + i];
		tmp[len] = '\0';
		return tmp;
	}
	friend bool operator < (const MyString & s1, const MyString & s2)
	{return strcmp(s1.s, s2.s) == -1;}
	friend bool operator == (const MyString& s1, const MyString& s2)
	{return strcmp(s1.s, s2.s) == 0;}
	friend bool operator > (const MyString& s1, const MyString& s2)
	{return strcmp(s1.s, s2.s) == 1;}
};


int CompareString( const void * e1, const void * e2)
{
	MyString * s1 = (MyString * ) e1;
	MyString * s2 = (MyString * ) e2;
	if( * s1 < *s2 )
	return -1;
	else if( *s1 == *s2)
	return 0;
	else if( *s1 > *s2 )
	return 1;
}
int main()
{
	MyString s1("abcd-"),s2,s3("efgh-"),s4(s1);
	MyString SArray[4] = {"big","me","about","take"};
	cout << "1. " << s1 << s2 << s3<< s4<< endl;
	s4 = s3;
	s3 = s1 + s3;
	cout << "2. " << s1 << endl;
	cout << "3. " << s2 << endl;
	cout << "4. " << s3 << endl;
	cout << "5. " << s4 << endl;
	cout << "6. " << s1[2] << endl;
	s2 = s1;
	s1 = "ijkl-";
	s1[2] = 'A' ;
	cout << "7. " << s2 << endl;
	cout << "8. " << s1 << endl;
	s1 += "mnop";
	cout << "9. " << s1 << endl;
	s4 = "qrst-" + s2;
	cout << "10. " << s4 << endl;
	s1 = s2 + s4 + " uvw " + "xyz";
	cout << "11. " << s1 << endl;
	qsort(SArray,4,sizeof(MyString),CompareString);
	for( int i = 0;i < 4;i ++ )
	cout << SArray[i] << endl;
	//s1的从下标0开始长度为4的子串
	cout << s1(0,4) << endl;
	//s1的从下标5开始长度为10的子串
	cout << s1(5,10) << endl;
	return 0;
}

B:继承自string的MyString
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
程序填空，输出指定结果
#include <cstdlib>
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
class MyString:public string
{
// 在此处补充你的代码
};


int main()
{
	MyString s1("abcd-"),s2,s3("efgh-"),s4(s1);
	MyString SArray[4] = {"big","me","about","take"};
	cout << "1. " << s1 << s2 << s3<< s4<< endl;
	s4 = s3;
	s3 = s1 + s3;
	cout << "2. " << s1 << endl;
	cout << "3. " << s2 << endl;
	cout << "4. " << s3 << endl;
	cout << "5. " << s4 << endl;
	cout << "6. " << s1[2] << endl;
	s2 = s1;
	s1 = "ijkl-";
	s1[2] = 'A' ;
	cout << "7. " << s2 << endl;
	cout << "8. " << s1 << endl;
	s1 += "mnop";
	cout << "9. " << s1 << endl;
	s4 = "qrst-" + s2;
	cout << "10. " << s4 << endl;
	s1 = s2 + s4 + " uvw " + "xyz";
	cout << "11. " << s1 << endl;
        sort(SArray,SArray+4);
	for( int i = 0;i < 4;i ++ )
	cout << SArray[i] << endl;
	//s1的从下标0开始长度为4的子串
	cout << s1(0,4) << endl;
	//s1的从下标5开始长度为10的子串
	cout << s1(5,10) << endl;
	return 0;
}
输入
无
输出
1. abcd-efgh-abcd-
2. abcd-
3.
4. abcd-efgh-
5. efgh-
6. c
7. abcd-
8. ijAl-
9. ijAl-mnop
10. qrst-abcd-
11. abcd-qrst-abcd- uvw xyz
about
big
me
take
abcd
qrst-abcd-
样例输入
无
样例输出
1. abcd-efgh-abcd-
2. abcd-
3. 
4. abcd-efgh-
5. efgh-
6. c
7. abcd-
8. ijAl-
9. ijAl-mnop
10. qrst-abcd-
11. abcd-qrst-abcd- uvw xyz
about
big
me
take
abcd
qrst-abcd-
提示
提示 1：如果将程序中所有 "MyString" 用 "string" 替换，那么除
了最后两条红色的语句编译无法通过外，其他语句都没有问题，而且输出和前
面给的结果吻合。也就是说，MyString 类对 string 类的功能扩充只体现在最
后两条语句上面。

提示 2: string 类有一个成员函数 string substr(int start,int
length); 能够求从 start 位置开始，长度为 length 的子串

提示 3: C++中，派生类的对象可以赋值给基类对象，因为，一个派生
类对象，也可看作是一个基类对象（大学生是学生）。反过来则不行(学生未
必是大学生） 同样，调用需要基类对象作参数的函数时，以派生类对象作为实参，也是没有问题的
来源
Guo Wei

#include <cstdlib>
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
class MyString:public string
{

public:
	MyString(const char* s):string(s){}
	MyString(const MyString& s) :string(s) {}//s作为派生类能被强制类型转换为基类
	MyString():string("\0"){}
	MyString operator+(const MyString& s1)
	{
		string a = *this;
		return MyString((a + s1). c_str());//string.c_str 将string类型的变量转换为const *char
	}
	MyString operator +(const char* s1) {
		string a = *this;
		return MyString((a + s1).c_str());
	}
	friend MyString operator+(const char* s1, const MyString& s2)
	{
		string a = s1, b = s2;
		return MyString((a+b).c_str());//关键的转换！不先转成string的话无法调用c_str
	}
	string operator()(int x, int y)
	{
		string tp;
		for (int i = 0; i < y; i++)
			tp += (*this)[i + x];
		return tp;
	}
};


int main()
{
	MyString s1("abcd-"),s2,s3("efgh-"),s4(s1);
	MyString SArray[4] = {"big","me","about","take"};
	cout << "1. " << s1 << s2 << s3<< s4<< endl;
	s4 = s3;
	s3 = s1 + s3;
	cout << "2. " << s1 << endl;
	cout << "3. " << s2 << endl;
	cout << "4. " << s3 << endl;
	cout << "5. " << s4 << endl;
	cout << "6. " << s1[2] << endl;
	s2 = s1;
	s1 = "ijkl-";
	s1[2] = 'A' ;
	cout << "7. " << s2 << endl;
	cout << "8. " << s1 << endl;
	s1 += "mnop";
	cout << "9. " << s1 << endl;
	s4 = "qrst-" + s2;
	cout << "10. " << s4 << endl;
	s1 = s2 + s4 + " uvw " + "xyz";
	cout << "11. " << s1 << endl;
        sort(SArray,SArray+4);
	for( int i = 0;i < 4;i ++ )
	cout << SArray[i] << endl;
	//s1的从下标0开始长度为4的子串
	cout << s1(0,4) << endl;
	//s1的从下标5开始长度为10的子串
	cout << s1(5,10) << endl;
	return 0;
}
